//
// Handles B+ tree indexing logic
//

#include <stdio.h>
#include <stdlib.h>
#include "../include/bplustree.h"

int num_nodes = 0;

// Function to create a new B+ tree node
long create_bplus_tree_node(FILE *index_file, BPlusTreeNode *node) {
    fseek(index_file, 0, SEEK_END);
    long offset = ftell(index_file);
    fwrite(node, sizeof(BPlusTreeNode), 1, index_file);
    return offset;
}

// Function to insert a key into the B+ tree (implementation skipped for simplicity)
bool insert_into_bplus_tree(FILE *index_file, long root_offset, float key, long data_offset) {
    // B+ Tree insertion logic...
    BPlusTreeNode root_node;
    fseek(index_file, root_offset, SEEK_SET);
    fread(&root_node, sizeof(BPlusTreeNode), 1, index_file);

    BPlusTreeNode current_node = root_node;
    long current_offset = root_offset;

    // Traverse the tree to find the leaf node
    while (!current_node.is_leaf) {
        int i = 0;
        while (i < current_node.num_keys && key >= current_node.keys[i]) {
            i++;
        }
        current_offset = current_node.children[i];
        fseek(index_file, current_offset, SEEK_SET);
        fread(&current_node, sizeof(BPlusTreeNode), 1, index_file);
    }

    // Step 2: Insert the key into the leaf node
    int i = current_node.num_keys - 1;

    // Find the position to insert the new key
    while (i >= 0 && current_node.keys[i] > key) {
        current_node.keys[i + 1] = current_node.keys[i];
        current_node.children[i + 2] = current_node.children[i + 1];
        i--;
    }

    current_node.keys[i + 1] = key;
    current_node.children[i + 2] = data_offset; // Data offset is inserted in the leaf node
    current_node.num_keys++;

    // Step 3: Write the updated leaf node back to the file
    fseek(index_file, current_offset, SEEK_SET);
    fwrite(&current_node, sizeof(BPlusTreeNode), 1, index_file);

    // Step 4: Handle splitting the node if needed
    if (current_node.num_keys == M) {
        split_node(index_file, current_offset, root_offset, &current_node);
    }
    num_nodes++;
    return true;
}

void split_node(FILE *index_file, long current_offset, long root_offset, BPlusTreeNode *current_node) {
    // Create a new node to store half of the keys
    BPlusTreeNode new_node;
    new_node.is_leaf = current_node->is_leaf;
    new_node.num_keys = M / 2;

    // Move half of the keys and children to the new node
    for (int i = 0; i < new_node.num_keys; i++) {
        new_node.keys[i] = current_node->keys[i + (M / 2) + 1];
        new_node.children[i] = current_node->children[i + (M / 2) + 1];
    }
    new_node.children[new_node.num_keys] = current_node->children[M]; // The last child pointer

    // Update the current node
    current_node->num_keys = M / 2;

    // Write the new node to the index file
    long new_node_offset = create_bplus_tree_node(index_file, &new_node);

    // Handle parent node update
    if (current_offset == root_offset) {
        // If we are splitting the root, create a new root
        BPlusTreeNode new_root;
        new_root.is_leaf = false;
        new_root.num_keys = 1;
        new_root.keys[0] = current_node->keys[M / 2];
        new_root.children[0] = current_offset;
        new_root.children[1] = new_node_offset;

        // Write the new root to the index file and update root_offset
        root_offset = create_bplus_tree_node(index_file, &new_root);
    } else {
        // If the current node is not the root, promote the middle key to the parent
        long parent_offset = find_parent(index_file, root_offset, current_offset);
        BPlusTreeNode parent_node;

        // Read the parent node
        fseek(index_file, parent_offset, SEEK_SET);
        fread(&parent_node, sizeof(BPlusTreeNode), 1, index_file);

        // Insert the middle key into the parent node
        int insert_pos = 0;
        while (insert_pos < parent_node.num_keys && parent_node.keys[insert_pos] < current_node->keys[M / 2]) {
            insert_pos++;
        }

        // Shift keys and children in the parent node to make space
        for (int i = parent_node.num_keys; i > insert_pos; i--) {
            parent_node.keys[i] = parent_node.keys[i - 1];
            parent_node.children[i + 1] = parent_node.children[i];
        }

        // Insert the middle key and new child pointer
        parent_node.keys[insert_pos] = current_node->keys[M / 2];
        parent_node.children[insert_pos + 1] = new_node_offset;
        parent_node.num_keys++;

        // Write the updated parent node back to the index file
        fseek(index_file, parent_offset, SEEK_SET);
        fwrite(&parent_node, sizeof(BPlusTreeNode), 1, index_file);

        // If the parent node is full, recursively split the parent node
        if (parent_node.num_keys == M) {
            split_node(index_file, parent_offset, root_offset, &parent_node);
        }
    }

    // Write the updated current node back to the index file
    fseek(index_file, current_offset, SEEK_SET);
    fwrite(current_node, sizeof(BPlusTreeNode), 1, index_file);
}

// Helper function to find the parent node of a given node (simple recursive search)
long find_parent(FILE *index_file, long root_offset, long child_offset) {
    if (root_offset == child_offset) {
        // The root has no parent
        return -1;
    }

    BPlusTreeNode root_node;
    fseek(index_file, root_offset, SEEK_SET);
    fread(&root_node, sizeof(BPlusTreeNode), 1, index_file);

    if (root_node.is_leaf) {
        return -1; // Leaf nodes have no children, hence cannot be parents
    }

    // Traverse the internal nodes to find the parent
    for (int i = 0; i <= root_node.num_keys; i++) {
        if (root_node.children[i] == child_offset) {
            return root_offset;
        }

        long parent_offset = find_parent(index_file, root_node.children[i], child_offset);
        if (parent_offset != -1) {
            return parent_offset;
        }
    }

    return -1; // If not found
}

// Function to get B+ tree statistics
void get_bplus_tree_statistics(FILE *index_file, long root_offset) {
    printf("B+ Tree Statistics:\n");
    printf("-------------------\n");

    // Parameter n of the B+ tree (Maximum keys per node)
    printf("Parameter n (max keys per node): %d\n", M);

    // Number of nodes in the B+ tree
    printf("Number of nodes in the B+ tree: %d\n", num_nodes);

    // Number of levels in the B+ tree
    int num_levels = 0;
    BPlusTreeNode current_node;
    long current_offset = root_offset;

    // Traverse down to find the height
    while (current_offset != -1) {
        fseek(index_file, current_offset, SEEK_SET);
        fread(&current_node, sizeof(BPlusTreeNode), 1, index_file);
        num_levels++;
        if (!current_node.is_leaf) {
            current_offset = current_node.children[0]; // Move to the first child
        } else {
            current_offset = -1; // Stop when a leaf node is reached
        }
    }
    printf("Number of levels in the B+ tree: %d\n", num_levels);

    // Content of the root node (only the keys)
    fseek(index_file, root_offset, SEEK_SET);
    fread(&current_node, sizeof(BPlusTreeNode), 1, index_file);
    printf("Content of the root node (keys): ");
    print_node_keys(&current_node);
}

// Function to print the keys of a node
void print_node_keys(BPlusTreeNode *node) {
    for (int i = 0; i < node->num_keys; i++) {
        printf("%.2f ", node->keys[i]);
    }
    printf("\n");
}


void search_bplus_tree(FILE *index_file, long root_offset, float lower, float upper) {
    BPlusTreeNode current_node;
    fseek(index_file, root_offset, SEEK_SET);
    fread(&current_node, sizeof(BPlusTreeNode), 1, index_file);

    // Traverse to the leaf level
    while (!current_node.is_leaf) {
        int i = 0;
        while (i < current_node.num_keys && lower > current_node.keys[i]) i++;
        fseek(index_file, current_node.children[i], SEEK_SET);
        fread(&current_node, sizeof(BPlusTreeNode), 1, index_file);
    }

    // Search within the leaf nodes for keys in the specified range
    do {
        for (int i = 0; i < current_node.num_keys; i++) {
            if (current_node.keys[i] >= lower && current_node.keys[i] <= upper) {
                printf("Found key: %f at data offset: %ld\n", current_node.keys[i], current_node.children[i + 1]);
            }
        }
        if (current_node.children[MAX_KEYS] != -1) {
            fseek(index_file, current_node.children[MAX_KEYS], SEEK_SET);
            fread(&current_node, sizeof(BPlusTreeNode), 1, index_file);
        } else {
            break;
        }
    } while (true);
}